/*******************************************************************************

	Copyright (C) 2014  René 'Shirk' Köcher
 
	This file is part of Hotarubi.

	Hotarubi is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
 
	Hotarubi is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
 
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************/


/* unit testing for string and memory functions from string.h */

#include "gtest/gtest.h"
#include "../strnxxx.cc"

const char* test_data_1 = "abcde\0";
const char* test_data_2 = "abcdx\0";
const char* test_data_3 = "abccd\0";

TEST( strncat, )
{
	char buffer[] = "xx\0xxxxxx";

	EXPECT_TRUE( builtin_strncat( buffer, test_data_1, 10 ) == buffer );
	EXPECT_EQ(  'a', buffer[2] );
	EXPECT_EQ(  'e', buffer[6] );
	EXPECT_EQ( '\0', buffer[7] );
	EXPECT_EQ(  'x', buffer[8] );

	buffer[0] = '\0';
	EXPECT_TRUE( builtin_strncat( buffer, test_data_2, 10 ) == buffer );
	EXPECT_EQ(  'x', buffer[4] );
	EXPECT_EQ( '\0', buffer[5] );

	EXPECT_TRUE( builtin_strncat( buffer, "\0", 10 ) == buffer );
	EXPECT_EQ( '\0', buffer[5] );
	EXPECT_EQ(  'e', buffer[6] );
	
	EXPECT_TRUE( builtin_strncat( buffer, test_data_1, 0 ) == buffer );
	EXPECT_EQ( '\0', buffer[5] );
	EXPECT_EQ(  'e', buffer[6] );

	EXPECT_TRUE( builtin_strncat( buffer, test_data_1, 3 ) == buffer );
	EXPECT_EQ(  'a', buffer[5] );
	EXPECT_EQ(  'c', buffer[7] );
	EXPECT_EQ( '\0', buffer[8] );
}

TEST( strncmp, equal )
{
	char empty[] = "";
	char buffer[] = "abcde\0f";

	EXPECT_EQ( 0, builtin_strncmp( test_data_1, buffer, 5  ) );
	EXPECT_EQ( 0, builtin_strncmp( test_data_1, buffer, 10 ) );
	EXPECT_EQ( 0, builtin_strncmp( test_data_1, test_data_2, 4 ) );
	EXPECT_EQ( 0, builtin_strncmp( test_data_1, "x", 0 ) );
}

TEST( strncmp, different )
{
	char empty[] = "";
	char buffer[] = "abcde\xfc";

	EXPECT_GT( 0, builtin_strncmp( test_data_1, test_data_2, 5  ) );
	EXPECT_GT( 0, builtin_strncmp(       empty, test_data_1, 5  ) );
	EXPECT_GT( 0, builtin_strncmp( test_data_1,         "x", 1  ) );
	EXPECT_GT( 0, builtin_strncmp( test_data_1,      buffer, 10 ) );

	EXPECT_LT( 0, builtin_strncmp( test_data_2, test_data_1, 5 ) );
	EXPECT_LT( 0, builtin_strncmp( test_data_1,       empty, 5 ) );
}

TEST( strncpy, )
{
	char buffer[] = "xxxxxxx";

	EXPECT_TRUE( builtin_strncpy( buffer, "", 1 ) == buffer );
	EXPECT_EQ( '\0', buffer[0] );
	EXPECT_EQ(  'x', buffer[1] );

	EXPECT_TRUE( builtin_strncpy( buffer, test_data_1, 6 ) == buffer );
	EXPECT_EQ(  'a', buffer[0] );
	EXPECT_EQ(  'e', buffer[4] );
	EXPECT_EQ( '\0', buffer[5] );
	EXPECT_EQ(  'x', buffer[6] );

	EXPECT_TRUE( builtin_strncpy( buffer, test_data_1, 7 ) == buffer );
	EXPECT_EQ( '\0', buffer[7] );

	EXPECT_TRUE( builtin_strncpy( buffer, "xxxx", 3 ) == buffer );
	EXPECT_EQ( 'x', buffer[0] );
	EXPECT_EQ( 'x', buffer[2] );
	EXPECT_EQ( 'd', buffer[3] );
}



