require 'erb'
require 'yaml'
require 'rake/clean'
require 'rake/loaders/makefile'

RELEASE_NAME  = ''
RELEASE_MAJOR = 0
RELEASE_MINOR = 1
RELEASE_MICRO = 0

Dir.glob( './scripts/**/*.rake' ).each { |rake_ext| import rake_ext }

# rake defaults
task :default => :kernel

desc "Build hotarubi.elf"
task :kernel => 'hotarubi.elf' do
  puts "Ready."
end

# collect sources and options files
GENERATED  = FileList.new( 'kernel/**/*.erb' ).map{ |name| name.sub( '.erb', '' ) }
SOURCES    = FileList.new( 'kernel/**/*.c', 'kernel/**/*.cc', 'kernel/**/*.S' )
SOURCES_64 = FileList.new( SOURCES )
SOURCES_32 = FileList.new
OBJECTS    = SOURCES.ext( '.o' )
DEPENDS    = SOURCES.ext( '.d' )

# split sources into 64bit and 32bit
Dir.glob( 'kernel/**/options.yaml' ).each do |option_file|
  { :sources_32 => [] }.merge( YAML::load_file( option_file ) )[ :sources_32 ].each do |src|
    SOURCES_32 << SOURCES_64.delete( "#{File.dirname( option_file )}/#{src}" )
  end
end

# file targets for kernel and *.o
file 'hotarubi.elf' => [ *OBJECTS, 'Rakefile', 'scripts/link.ld' ] do |t|
  cc_link( OBJECTS, t.name.ext( '.elf64' ), :kernel => true )
  cc_64to32( t.name.ext( '.elf64' ), t.name, :cleanup => true )
end

SOURCES_64.each do |src|
  file src.ext( '.o' ) => [ src, 'Rakefile' ] do |t|
    cc_compile( src, t.name )
  end
end

SOURCES_32.each do |src|
  file src.ext( '.o' ) => [ src, 'Rakefile' ] do |t|
    cc_compile( src, t.name, :use32 => true )
  end
end

GENERATED.each do |t|
  file t => [ "#{t}.erb", 'Rakefile' ]
end

unless Rake.application.top_level_tasks.join( ' ' ) =~ /^(toolchain[:\/].*|travis:prepare|clean)/
  # include autogenerated depends
  file '.depends.mf' => [ 'templates:check', *GENERATED, *DEPENDS ] do |t|
    unless uptodate? t.name, t.prerequisites[1..-1]
      puts "GEN      #{t.name}"
      sh "cat #{t.prerequisites[1..-1].join( ' ' )} > #{t.name}", :verbose => false
    end
  end

  import '.depends.mf'
end

CLEAN.include( 'kernel/**/*.d' )
CLEAN.include( 'kernel/**/*.o' )
CLEAN.include( '**/*.o32' )
CLEAN.include( '**/*.o64' )
CLEAN.include( '**/*.elf32' )
CLEAN.include( '**/*.elf64' )
CLEAN.include( '.depends.mf' )

CLOBBER.include( 'hotarubi.elf' )
CLOBBER.include( 'Symbols.map' )
